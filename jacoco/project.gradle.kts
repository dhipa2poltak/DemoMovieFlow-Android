apply(plugin = "jacoco")

tasks.withType<Test> {
    configure<JacocoTaskExtension> {
        isIncludeNoLocationClasses = true
        excludes = listOf("jdk.internal.*")
    }
}

project.afterEvaluate {
    val variants = listOf("debug", "prodDebug")

    tasks.create<JacocoReport>(name = "allDebugCoverage") {
        group = "Reporting"
        description = "Generate overall Jacoco coverage report for the debug build."

        reports {
            html.required.set(true)
            xml.required.set(true)
        }

        val excludes = mutableSetOf(
            // data binding
            "android/databinding/**/*.class",
            "**/android/databinding/*Binding.class",
            "**/android/databinding/*",
            "**/androidx/databinding/*",
            "**/databinding/*",
            "**/BR.*",
            "**/DataBinding*.*",
            // android("**/R.class"),
            "**/R\$*.class",
            "**/BuildConfig.*",
            "**/Manifest*.*",
            "**/*Test*.*",
            "android/**/*.*",
            // dagger
            "**/*_MembersInjector.class",
            "**/Dagger*Component.class",
            "**/Dagger*Component\$Builder.class",
            "**/Dagger*Subcomponent*.class",
            "**/*Subcomponent\$Builder.class",
            "**/*Module_*Factory.class",
            "**/di/module/*",
            "**/*_Factory*.*",
            "**/*Module*.*",
            "**/*Dagger*.*",
            "**/*Hilt*.*",
            "hilt*",
            "dagger*",
            // kotlin
            "**/*MapperImpl*.*",
            "**/*\$ViewInjector*.*",
            "**/*\$ViewBinder*.*",
            "**/BuildConfig.*",
            "**/*Component*.*",
            "**/*BR*.*",
            "**/Manifest*.*",
            "**/*\$Lambda\$*.*",
            "**/*Companion*.*",
            "**/*Module*.*",
            "**/*Dagger*.*",
            "**/*Hilt*.*",
            "**/*MembersInjector*.*",
            "**/*_MembersInjector.class",
            "**/*_Factory*.*",
            "**/*_Provide*Factory*.*",
            "**/*Extensions*.*",
            // sealed and data classes
            "**/*\$Result.*",
            "**/*\$Result\$*.*",
            // adapters generated by moshi
            "**/*JsonAdapter.*",
            "**/*Fragment.*",
            "**/*Fragment*.*",
            "**/*Activity.*",
            "**/*Activity*.*",
            "**/*Adapter.*",
            "**/*Adapter*.*",
            "**/TheApplication*.*",
            "**/framework/Config.*"
        )

        val jClasses = arrayListOf<String>()
        subprojects.forEach { proj ->
            variants.forEach { variant ->
                jClasses.add("${proj.buildDir}/intermediates/javac/$variant/classes")
            }
        }

        val kClasses = arrayListOf<String>()
        subprojects.forEach { proj ->
            variants.forEach { variant ->
                kClasses.add("${proj.buildDir}/tmp/kotlin-classes/$variant")
            }
        }

        val kClassesLib = arrayListOf<String>()
        subprojects.forEach { proj ->
            kClassesLib.add("${proj.buildDir}/classes/kotlin/main")
        }

        val javaClasses = arrayListOf<String>()
        jClasses.forEach { path ->
            javaClasses.add((fileTree(path) { exclude(excludes) }).getDir().getAbsolutePath())
        }

        val kotlinClasses = arrayListOf<String>()
        kClasses.forEach { path ->
            kotlinClasses.add((fileTree(path) { exclude(excludes) }).getDir().getAbsolutePath())
        }

        val kotlinClassesLib = arrayListOf<String>()
        kClassesLib.forEach { path ->
            kotlinClassesLib.add((fileTree(path) { exclude(excludes) }).getDir().getAbsolutePath())
        }

        classDirectories.setFrom(files(listOf(javaClasses, kotlinClasses, kotlinClassesLib)))
        classDirectories.setFrom(files(classDirectories.files.map {
            fileTree(it).apply {
                exclude(excludes)
            }
        }))

        val sources = arrayListOf<String>()
        subprojects.forEach { proj ->
            variants.forEach { variant ->
                sources.add("${proj.projectDir}/src/main/java")
                sources.add("${proj.projectDir}/src/main/kotlin")
                sources.add("${proj.projectDir}/src/$variant/java")
                sources.add("${proj.projectDir}/src/$variant/kotlin")
            }
        }

        sourceDirectories.setFrom(files(sources))

        val executions = arrayListOf<String?>()
        subprojects.forEach { proj ->
            variants.forEach { variant ->
                var path = "${proj.buildDir}/jacoco/test${variant.capitalize()}UnitTest.exec"
                if (File(path).exists() && !executions.contains(path)) {
                    executions.add(path)
                } else {
                    path = "${proj.buildDir}/jacoco/test.exec"
                    if (File(path).exists() && !executions.contains(path)) {
                        executions.add(path)
                    }
                }
            }
        }

        executions.removeAll(listOf(null))
        executionData.setFrom(files(executions))
    }
}
